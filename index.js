// Generated by CoffeeScript 1.9.1

/*
  mixIn BaseController, SecondController
    include: ['index', 'show'],
    include: ['auth', 'new'],

  mixIn BaseController,
    include: ['index', 'show'],
    SecondController
    include: ['auth', 'new'],
 */

(function() {
  var _, bakeIn, filterArgs,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  bakeIn = function() {
    var args, baseObjs, context, receivingObj, receivingObjAttrs;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    receivingObj = args.pop();
    receivingObjAttrs = _.sortBy(_.keys(receivingObj));
    baseObjs = args;
    context = receivingObj;
    _.each(baseObjs, function(baseObj) {
      var attr, fn, k, results;
      results = [];
      for (k in baseObj) {
        if (!hasProp.call(baseObj, k)) continue;
        attr = baseObj[k];
        if (_.isFunction(attr)) {
          fn = attr;
          results.push(receivingObj[k] = _.bind(fn, context));
        } else {
          if (_.indexOf(receivingObjAttrs, k, true) === -1) {
            results.push(receivingObj[k] = _.cloneDeep(attr));
          } else if (_.isArray(attr)) {
            console.log('attr ' + attr + ' is an array');
            results.push(receivingObj[k] = receivingObj[k].concat(attr));
          } else if (_.isObject(attr)) {
            results.push(receivingObj[k] = _.merge(receivingObj[k], attr));
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    });
    return receivingObj;
  };

  filterArgs = function() {
    var args, baseObjs, options;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    baseObjs = [];
    options = [];
    return _.each(args, function(obj) {

      /*if not _.isObject(obj)
        throw new Error 'BakeIn only accepts objects (As bakeIn objs and options objs)'
      else
        for own k, attr of obj
          if _.isFunction(attr)
       */
    });
  };

  module.exports = bakeIn;

}).call(this);

//# sourceMappingURL=index.js.map
